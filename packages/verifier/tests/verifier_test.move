#[test_only]
module halo2_verifier::verifier_test {
    use std::bn254_algebra::{G1, FormatG1Uncompr, G2, FormatG2Uncompr};
    use std::option;
    use std::vector;

    use aptos_std::crypto_algebra;

    use halo2_common::params;
    use halo2_verifier::halo2_verifier;
    use halo2_verifier::protocol;

    // the following param data is generated from `crates/vk-gen-examples/params/challenge_0078-kzg_bn254_16.srs`
    // they all in uncompressed form.
    #[test_only]
    const TESTING_G1: vector<u8> = x"01000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000";
    #[test_only]
    const TESTING_G2: vector<u8> = x"edf692d95cbdde46ddda5ef7d422436779445c5e66006a42761e1f12efde0018c212f3aeb785e49712e7a9353349aaf1255dfb31b7bf60723a480d9293938e19aa7dfa6601cce64c7bd3430c69e7d1e38f40cb8d8071ab4aeb6d8cdba55ec8125b9722d1dcdaac55f38eb37033314bbc95330c69ad999eec75f05f58d0890609";
    #[test_only]
    const TESTING_S_G2: vector<u8> = x"e4115200acc86e7670c83ded726335def098657fe8668323e9e41e6781b83b0a9d83b54bbb00215323ce6d7f9d7f331a286d7707d03f7dbdd3125c6163588d13ed1abbe32fb3f9c8817d1ae305b395f5ff1db05263b9879602dc18c92e73d916ee07a11fd87eaa69ae764c48f7d618d1d531a4956eed421efcf2491a99769a16";

    #[test(s = @aptos_std)]
    public fun check_verify_ok(s: &signer) {
        crypto_algebra::enable_cryptography_algebra_natives(s);
        let params = params::new(
            option::destroy_some(crypto_algebra::deserialize<G1, FormatG1Uncompr>(&TESTING_G1)),
            option::destroy_some(crypto_algebra::deserialize<G2, FormatG2Uncompr>(&TESTING_G2)),
            option::destroy_some(crypto_algebra::deserialize<G2, FormatG2Uncompr>(&TESTING_S_G2))
        );
        // protocol of example vector-mul
        // generated by `cargo run --release --  --param-path params/challenge_0078-kzg_bn254_16.srs --verifier-address 0xcfae5b6bd579e7aff4274aeca434bb500c024b89c139b545c6eeb27bfafea8c1 build-publish-vk-aptos-txn --example vector-mul -o vk_deployment`
        let protocol = protocol::from_bytes(vector[
        x"0f040b991d2f930e735f0028ac957fb7ab6707474ed4eedbfe4f7cbb391c6f07",
        x"baaa5c0c4c452e320267ee0a90b648c30821c86d8627359fcb32e13deb83ad02",
        x"8703f8f88dac3610100dfbe5bb52498335e94896d2268e0128976bb88e15ec1bd7e110682012410aaebe615ee56d487414c5cdf4edc3ea7c94c18898207f750438eb14dd26e292dc9e41920db4619a83a4b6c5691825d26cc4a33fb29ccd69899a8c64ea83540da5130cd2f098126287ba27fc2f51dd20bc9fc7fe5bdfb3dd91",
        x"10",
        x"01000000",
        x"03000000",
        x"0100000000000000",
        x"0100000000000000",
        x"000000",
        x""
        ],
            vector[
        x"00000000000100000000",
        x"00010000000100000000",
        x"00020000000100000000"
            ],
            vector[
        x"f4000000000100000000"
            ],
            vector[
        x"ff000000000100000000"
            ],
            vector[
        x"f400000000",
        x"0000000000",
        x"0001000000",
        x"0002000000"
            ],
            vector[
        x"000000f093f5e1439170b97948e833285d588181b64550b829a031e1724e6430",
        x"0100000000000000000000000000000000000000000000000000000000000000"
            ],
            vector[
        x"0200000000000200000002000000010000000300000001000000010003000000000000000100000001000000010000000300000001000000"
            ],
            vector[],
            vector[]
        );
        let proof_gwc = x"06661ff6e3bd260e8dc4f9096034eaf96782d3fed55ec7fbc5928d2a8de1dd9ce1563c6c4fbc544a0544f957202b6cdcfb0b2e203ba886694a19542d8f749c2d9d0fe09c16f5172e45e48f82f28679649c482ae4baacec0c4d5514711eb4aa255508673b9a378da619ab1d60b24a077e7d4489f19e8b6610542d92ff65bb8dab5442ab04b452a5199776c980dafb6e6ef641b08ce72c0c1560256b552a2a0520ce48ece7c5dd11faa9945ef0cdaffe033d613b6ee01a9584338a37dc189b6994e0fb075b65df7afa31f16a23fdda32d53accf86e4ab33c64b9237f9c771732a7fc3f88b19fa3e0e8633ce5bffaf5fcc5fd7e7b47e04d6f6c0ae94a4f5bd5ab95e4b29a668dab5a120d40ee505dd3efc66a329ed8d0546b1d81ba0360f1b5d60bfa53181825bdb36455ea4e381b37fc039581de1104e4b6f0b6eb6ba3f8129628e4f11d400a5d66199ddefb804e19324d81934118d31c0ea06bb3cd2b556f91172b82948d42a1ba1ce89efbba80ec0b33725634aef76964d84a120bb1bc249b12cfaf1ddd6370f6561e33b1938b7e229b542fccf7acbf7c86d5888d673eb9112a9c82ee2445dfbade228a76c059eab213fd21d113c2d063e4b00dd2168656432c65b169e05482442ea96100fcf2454def5b292f89ef52af9ead840a040fd7af2f00ebcfb77c18517de3ab20a9c7a398390d07bb79d04141b649cf579c3adbf8069d89f58f7c10b9f6fa4b0211d4d5b47b2a0ed495f3bd2c3bf3b4114c80de10167f97449b98a2c769e75bd3434a7cfa035ee53340efdb5e2d6925fd1627e2ed1bb37bedeaabe8ed904deeac8ce1f61256b2c7eb5d342ee3433223a4670ae2a8159c7b13b719d24a99f5d9ccfb79e26c98274db8425eb593d6bad0cc9ac7bc392809190f62c314238b5eb6a6713a8e3538d479dd126076e86109f69401c26c5727ba96c131ddbf20d9b36b5b9279f08169210c93e57180d09051ecbad013277f242eebd038ea2475f104ec7d5d41a2ee959095d7080148caf995aba493d72c1c0a5761d54c12a74a85aaa43e9a4f6b54276e07a3578ad9a2cace248487795ea324871f98c48722c272afdf8785c23f226e533f18fe5730758427cb2a5f8122942abc0b1dcb277545aac5bcb06aadb0fc663772dcc785eb31257f4cefcaf07c600e127969290ad24ba417b44d91689415fa7850c29147b0f083c6ab3a47d8a3251de7350bca01f78ac31c014a5ec608f634cbc402baede3a4fdf24dd5b280363f1051aafa86947b34ae5aa6f485bf1474e7f252d2c3a47c4868b296896890fc282ffe94f21fd3e974e3191ad3dda891127455f7a907304b0fc95fa46626bb63b92a81e2a52bcf22c052a2d0b4417fa0075d59097627fa554ae5ad9a440e5f9a271cdb45d930fe43c5e6a061079fda685b104aef39d5e9e6c832f03268af6e8a2724ca9ec1f1f60acc7093815a8df2b3ea77a1d34ca3fd3ab2706b513b508cc6d7a3";
        let proof_shplonk = x"06661ff6e3bd260e8dc4f9096034eaf96782d3fed55ec7fbc5928d2a8de1dd9ce1563c6c4fbc544a0544f957202b6cdcfb0b2e203ba886694a19542d8f749c2d9d0fe09c16f5172e45e48f82f28679649c482ae4baacec0c4d5514711eb4aa255508673b9a378da619ab1d60b24a077e7d4489f19e8b6610542d92ff65bb8dab5442ab04b452a5199776c980dafb6e6ef641b08ce72c0c1560256b552a2a0520ce48ece7c5dd11faa9945ef0cdaffe033d613b6ee01a9584338a37dc189b6994e0fb075b65df7afa31f16a23fdda32d53accf86e4ab33c64b9237f9c771732a7fc3f88b19fa3e0e8633ce5bffaf5fcc5fd7e7b47e04d6f6c0ae94a4f5bd5ab95e4b29a668dab5a120d40ee505dd3efc66a329ed8d0546b1d81ba0360f1b5d60bfa53181825bdb36455ea4e381b37fc039581de1104e4b6f0b6eb6ba3f8129628e4f11d400a5d66199ddefb804e19324d81934118d31c0ea06bb3cd2b556f91172b82948d42a1ba1ce89efbba80ec0b33725634aef76964d84a120bb1bc249b12cfaf1ddd6370f6561e33b1938b7e229b542fccf7acbf7c86d5888d673eb9112a9c82ee2445dfbade228a76c059eab213fd21d113c2d063e4b00dd2168656432c65b169e05482442ea96100fcf2454def5b292f89ef52af9ead840a040fd7af2f00ebcfb77c18517de3ab20a9c7a398390d07bb79d04141b649cf579c3adbf8069d89f58f7c10b9f6fa4b0211d4d5b47b2a0ed495f3bd2c3bf3b4114c80de10167f97449b98a2c769e75bd3434a7cfa035ee53340efdb5e2d6925fd1627e2ed1bb37bedeaabe8ed904deeac8ce1f61256b2c7eb5d342ee3433223a4670ae2a8159c7b13b719d24a99f5d9ccfb79e26c98274db8425eb593d6bad0cc9ac7bc392809190f62c314238b5eb6a6713a8e3538d479dd126076e86109f69401c26c5727ba96c131ddbf20d9b36b5b9279f08169210c93e57180d09051ecbad013277f242eebd038ea2475f104ec7d5d41a2ee959095d7080148caf995aba493d72c1c0a5761d54c12a74a85aaa43e9a4f6b54276e07a3578ad9a2cace248487795ea324871f98c48722c272afdf8785c23f226e533f18fe5730758427cb2a5f8122942abc0b1dcb277545aac5bcb06aadb0fc663772dcc785eb31257f4cefcaf07c600e127969290ad24ba417b44d91689415fa7850c29147b0f083c6ab3a47d8a3251de7350bca01f78ac31c014a5ec608f634cbc402baede3a4fdf24dd5b280363f1051aafa86947b34ae5aa6f485bf1474e7f252d2c3a47c4868b296896890fc282ffe94f21fd3e974e3191ad3dda891127455f7a907304b0fc95fa46626bb63b92a154ef6d1c98580f3f687ab4bd069e7fcbacd5f752803d257934e9f53cc8eb0885c999cbaec8dd3a21afd50a55634b2816526ac709e2ca31fa1c631c9877e2321";
        let instances = vector[
            x"0600000000000000000000000000000000000000000000000000000000000000",
            x"0600000000000000000000000000000000000000000000000000000000000000",
            x"0600000000000000000000000000000000000000000000000000000000000000"
        ];
        let result = halo2_verifier::verify_single(&params, &protocol, vector::singleton(instances), proof_gwc, 1);
        assert!(result, 100);
        let result = halo2_verifier::verify_single(&params, &protocol, vector::singleton(instances), proof_shplonk, 0);
        assert!(result, 101);
    }
}
