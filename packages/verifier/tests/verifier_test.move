#[test_only]
module halo2_verifier::verifier_test {
    use std::bn254_algebra::{G1, FormatG1Uncompr, G2, FormatG2Uncompr};
    use std::option;
    use std::vector;

    use aptos_std::crypto_algebra;

    use halo2_common::params;
    use halo2_verifier::halo2_verifier;
    use halo2_verifier::protocol;

    // the following param data is generated from `crates/vk-gen-examples/params/challenge_0078-kzg_bn254_16.srs`
    // they all in uncompressed form.
    #[test_only]
    const TESTING_G1: vector<u8> = x"01000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000";
    #[test_only]
    const TESTING_G2: vector<u8> = x"edf692d95cbdde46ddda5ef7d422436779445c5e66006a42761e1f12efde0018c212f3aeb785e49712e7a9353349aaf1255dfb31b7bf60723a480d9293938e19aa7dfa6601cce64c7bd3430c69e7d1e38f40cb8d8071ab4aeb6d8cdba55ec8125b9722d1dcdaac55f38eb37033314bbc95330c69ad999eec75f05f58d0890609";
    #[test_only]
    const TESTING_S_G2: vector<u8> = x"e4115200acc86e7670c83ded726335def098657fe8668323e9e41e6781b83b0a9d83b54bbb00215323ce6d7f9d7f331a286d7707d03f7dbdd3125c6163588d13ed1abbe32fb3f9c8817d1ae305b395f5ff1db05263b9879602dc18c92e73d916ee07a11fd87eaa69ae764c48f7d618d1d531a4956eed421efcf2491a99769a16";

    #[test(s = @aptos_std)]
    public fun check_verify_ok(s: &signer) {
        crypto_algebra::enable_cryptography_algebra_natives(s);
        let params = params::new(
            option::destroy_some(crypto_algebra::deserialize<G1, FormatG1Uncompr>(&TESTING_G1)),
            option::destroy_some(crypto_algebra::deserialize<G2, FormatG2Uncompr>(&TESTING_G2)),
            option::destroy_some(crypto_algebra::deserialize<G2, FormatG2Uncompr>(&TESTING_S_G2))
        );
        // protocol of example vector-mul
        // generated by `cargo run --release --  --param-path params/challenge_0078-kzg_bn254_16.srs --verifier-address 0xcfae5b6bd579e7aff4274aeca434bb500c024b89c139b545c6eeb27bfafea8c1 build-publish-vk-aptos-txn --example vector-mul -o vk_deployment`
        let protocol = protocol::from_bytes(vector[
        x"4d09094abbc19971949b779d16a14fcaba80f4e7158da6fd8bfed124f5a30013",
        x"522e34b2c866c35dc33be8943d0803711923b9cd253bff18e60c95eaced78e97a8a7b2c52981a450aa6f2112a286cb71c69939e6adaa508bc6ce33702f1c97a1",
        x"b8b806fcbecf446181b292153b804425482cd10edc219d52997e7860106b4010f1939fa65597869bcaa3f800dafcefcad9612cb2c8bb3c68babbd66c61dbc821bfcd73ada6a1eebeb29efa9dfbe250336eb7f5761c153ef099ccdb3bf1523e2fb66d4ea476e15b448339361a74e4be15fc17811ebfc62761aa2435405c913c9b",
        x"10",
        x"02000000",
        x"03000000",
        x"0200000000000000",
        x"0100000000000000",
        x"0000",
        x""
        ],
            vector[
        x"00000000000100000000",
        x"00010000000100000000",
        x"00000000000101000000"
            ],
            vector[
        x"f4000000000100000000"
            ],
            vector[
        x"ff000000000100000000",
        x"ff010000000100000000"
            ],
            vector[
        x"f400000000",
        x"ff00000000",
        x"0000000000",
        x"0001000000"
            ],
            vector[
        x"000000f093f5e1439170b97948e833285d588181b64550b829a031e1724e6430",
        x"0100000000000000000000000000000000000000000000000000000000000000"
            ],
            vector[
        x"0200000000000200000002000000010000000400000001000000010003000000000000000100000001000000010000000400000001000000"
            ],
            vector[],
            vector[]
        );
        let proof_gwc = x"37207301800e87391cc86fbae75ee0cf43fe56ed711a661da249df5ab1cc2c9597e3b8e6ef0cbfccaac9bcf75c2005f10e61c22ba85f784b450f11c4ba3d8e15c738b80040982f262b191dc060319363f61eca6ab19403be7e151daa8364d39bdb125e73e3c3ce090d02e95f3afdb7214dc94658bdaae726d1f3cf1abc361aa945ad75e8aa56a3c19956ec2b4b56309cb91efb2e2c91d70b9fc1a4f63306b10c1e49380039827cd97b5f219475f2f2b3191f7271e8857c46b62461b1ce36ff1143a82de36e34474d08c116fa9cc3ab15060772742547258dc3169806e8e7479a51f2eac13ed65cb3113f57218a791f78342b2eb4faf8d0e6a4de7d71d45f0ea717d875c4aa57de0f3ca536390c700bdde87edb5c225d3fc6a29d557d4deffb222a0a499482c1df84d404c0f9d90a4426c357ddd6693765c47271a709949cd60ce4699030bbe8fe3797b9956fd3f73378ef7e2fe5edb2e343dc183bc4efb6681c6907777fb73d772a4e1ee3dcd5a4cee40b823599b2eef2365d014c6f78915028f80af059fbcb233c1854270747c376682540fd1b9987e88f950dbfbb8f25ee013b804391ced9675e79a8f3eae3407eff34451231e13c573bbc849db60bf0c229c3af55f2a91b41b695afe9e77b651d9a461f785cba68fc92345139348803291af0b6d8812716ea67dcc48bd4ec0bba9911bd8cadf934ed4ace109b86b84af524003c39fdeffcc01c76362dc5c577c8888d850e5abba865ee4a02c5c553922b1d91ca6cc8777f84eb5b97e8b4f814b56abd4773dc4d63c2a7185f5b5b5cc8ad2e191926631827bf2ac464539618c590c959b8ac09707fe1939037cc6824f882170e4ae5b0b3f4f67c5e410879233cc527837a62797b7abd5cf2c8313b9407821cc665457e7ed51b273c6fa531d841fe3efbdd5aee8a81ad7b78daf8d873e22425fe009291d0453b9a53a10a37a8e4da6217f3f454f8430fc371eb66cbf6d85e116f0914c85e5bd6f63dc963fe0838031e8cea40f5e8981518512b22d933ec4c2adbf22fc794f46fe56d6985efdbc64cf463948076426c029a767e4cd0b67e3d2802a26d4d5f7500fb6426fd548ad53368913e83e52f5e486a33e97652c31984100b40557b9df104b6f42b474d0aeb228fbe6a810f9326f76332d5945e5e7937157b7191cdc6eed596b1d7311c18ad402f2c8ee6d9485af856bbd9a7b211b7991d299ca7680788ec5a484c9c7e6b6a9bde4ab8cf52574ff2ec53774a3a9aeb820b09e503226a5dccec7fd45597871dc1a8c1e215f58fb7e0f4e2620e2bd933891ac5e7a4377356316379e6d360dcfa8beae523993df50376ec4bcbdec01aca44087d265d27c87216f013e2ae11d1170910e6098b1fb066340131d5d628ce0d5922e91ebf58dbe0947ccda9908a7b30c7f7e06f9eabc569611a725007bf6c9b9c272041e785d965da9948003c16729132a26ccfa1d4e1e48a23102ef429d6a5a6aa";
        let proof_shplonk = x"06661ff6e3bd260e8dc4f9096034eaf96782d3fed55ec7fbc5928d2a8de1dd5ce1563c6c4fbc544a0544f957202b6cdcfb0b2e203ba886694a19542d8f749c2d9d0fe09c16f5172e45e48f82f28679649c482ae4baacec0c4d5514711eb4aa255508673b9a378da619ab1d60b24a077e7d4489f19e8b6610542d92ff65bb8d6b5442ab04b452a5199776c980dafb6e6ef641b08ce72c0c1560256b552a2a0520ce48ece7c5dd11faa9945ef0cdaffe033d613b6ee01a9584338a37dc189b6954e0fb075b65df7afa31f16a23fdda32d53accf86e4ab33c64b9237f9c7717326762daa7c924e89622b9a2890ea0156ca39d9c628a8ed55f375fe8f4b68abdb6088af71dd45d783231b4faa779783b65a84835c6c236519f0a38939b5c0228b768bc5d4668208d046fdfcaf5413bcfa53f74de2a61f1ed1fe8431c2737c014080db79cc9cd424cd8131078529850c0ded21a5807d05db2fad9c23474aea774b111911545da9b75a4a67812e017f1347cf6a3f9271c9eec4df98e8579de13d4cc2d4f3c08b8b45a32663c3901e42925168458ebfbf3b6581643e5e04608c0d3471dca54cb9be51eb4e25f06d57c249a26621cedd680079d68de4abdec84fd1a3509776e1e09708970ab57c5106bee4e5e0e51ebd795e8e1a66ff1d9e5e7f2a7591573953d6badc461d33b91975bab8d430f38a373514d6a1366509fe7ae55d0672784920c2053a92f465f0dbc41d5adecf1840ef2c8f67415112d7453ddaaf3631b2207f8f3a917d3e1de062ff184fdd8684327433dd93e3639fdc28b00a5a0772948248a8754af35fc7df9890f9d5bdde4c2396a28362a60fdb51166c9b860332685c17d9e580ee3485756d286a32a6cd81364ab1b49929264856d06392aaa900e44f14f961f1f14e35de6cbf690f445166ce56877c776896e9b94d3f760cfd011de03e0387f359c7ccc9de6ba71a8bb4f0116316aa00e56a04f792d56853add02d7a0c03ff8b5ced61ce8e1792ef035cf39fea4c322a5dd78de3bdc18d5974f06a064d7f5899766ecf2ec5482a52c17cf732e80a615c4498d830527f22eef9a2c990a63d4895d9801a973f512ace8ea66236fcfbe1f02acd7277f22d0a9e6652e0850bd3e164ebb21da674035a210b021735dccb853ea83e6d59bb69284b773043a3d7748334b2c42fcf3f145577aa7ce128403106327b6deee886aed599c7c2068346f4af3a805ec971c6c323d87fe2e2610f615c0ebfa03b516c0b796ad680a3f929d626e5279ac35d1d357911f1c286e796af82eaca91e4c02a78fc6d17a2402339241206bc9b930ecca47d1ced7fb5712192b9b0b60feb69c407d6e3f67295043053f254006e041bf6fc17135477bde7daa18261c6134e68c556aa219d52c7cd7b0327a38c6a687b3209b0ef8479597c547387df15142bac9865a91f7796e";
        let instances = vector[
            x"fc00000000000000000000000000000000000000000000000000000000000000"
        ];
        let result = halo2_verifier::verify_single(&params, &protocol, vector::singleton(instances), proof_gwc, 1);
        assert!(result, 100);
        // let result = halo2_verifier::verify_single(&params, &protocol, vector::singleton(instances), proof_shplonk, 0);
        // assert!(result, 101);
    }
}
