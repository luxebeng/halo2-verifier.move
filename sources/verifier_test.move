#[test_only]
module halo2_verifier::verifier_test {
    use halo2_verifier::params;
    use halo2_verifier::protocol;
    use std::vector;
    use aptos_std::crypto_algebra;
    use halo2_verifier::halo2_verifier;
    use aptos_std::crypto_algebra::Element;
    use std::bn254_algebra::Fr;
    use halo2_verifier::bn254_utils;
    use std::option;

    // the following param data is generated from `crates/vk-gen-examples/params/challenge_0078-kzg_bn254_16.srs`

    #[test_only]
    const G1: vector<u8> = x"0100000000000000000000000000000000000000000000000000000000000000";
    #[test_only]
    const G2: vector<u8> = x"edf692d95cbdde46ddda5ef7d422436779445c5e66006a42761e1f12efde0018c212f3aeb785e49712e7a9353349aaf1255dfb31b7bf60723a480d9293938e19";
    #[test_only]
    const S_G2: vector<u8> = x"e4115200acc86e7670c83ded726335def098657fe8668323e9e41e6781b83b0a9d83b54bbb00215323ce6d7f9d7f331a286d7707d03f7dbdd3125c6163588d53";

    #[test(s = @aptos_std)]
    public fun check_verify_ok(s: &signer) {
        crypto_algebra::enable_cryptography_algebra_natives(s);
        let params = params::new_for_test(&G1, &G2, &S_G2);
        let protocol = protocol::from_bytes(vector[
            x"0f040b991d2f930e735f0028ac957fb7ab6707474ed4eedbfe4f7cbb391c6f07",
            x"baaa5c0c4c452e320267ee0a90b648c30821c86d8627359fcb32e13deb83ad02",
            x"8703f8f88dac3610100dfbe5bb52498335e94896d2268e0128976bb88e15ec1bd7e110682012410aaebe615ee56d487414c5cdf4edc3ea7c94c18898207f750438eb14dd26e292dc9e41920db4619a83a4b6c5691825d26cc4a33fb29ccd69499a8c64ea83540da5130cd2f098126287ba27fc2f51dd20bc9fc7fe5bdfb3dd51",
            x"00",
            x"10",
            x"01000000",
            x"03000000",
            x"0100000000000000",
            x"0100000000000000",
            x"000000",
            x""
            ],
            vector[
            x"00000000000100000000",
            x"00010000000100000000",
            x"00020000000100000000"
            ],
            vector[
            x"f4000000000100000000"
            ],
            vector[x"ff000000000100000000"],
            vector[
            x"f400000000",
            x"0000000000",
            x"0001000000",
            x"0002000000"
            ],
            vector[
            x"02000000000000f093f5e1439170b97948e833285d588181b64550b829a031e1724e64300200000002000000010000000300000001000000010000000000000000000000000000000000000000000000000000000000000003000000000000000100000001000000010000000300000001000000"
            ],
            vector[],
            vector[]
        );
        let proof = x"556e5e3101d5915ff78eabae7f6f29fb63640f8f8b3b2d2ddbff722ef143182c89bf81fd3ff9e1e3575973d97bd68211afc985699844a4209cbb7ce0a8c6f151eef14118d35451d01b64757af0497e8538d1542ca337b19ec98a7009924e615e0144e7bdd74e6493e9fa378609648e2606fd7a83c0bd322af0ac6c4e3ae2b3160205e4c9b7da738d3c52dcfeb3941c7403f6c72092823202d34bdda1a0d18b620e251eada4891a5b998b10ea0933159914365dc74857b57131c30aafcc6667202ba574e7b8886fa44c5d0b8c0adf681dd24913b98ae5e833ab08956fbd2f9d02b7ccf36271a25bd7c4d2daf1990f2ccb9477f3783dea7958718547427e009c1670dc9ea2cf652b4308fb3148deb409cf52bddce5f408c879340f87f409289d495dd2ce438e9bffab8c25df427ea065e8771b13525a59390a8f755f48a6507a12cc34818ab26c31145cabdb2ab8ed52689f2c6bf5fc272272ef7f4c4fb219d22ea30cafb78b6ed75db7da83997fbe844261999e510c9ec34264a7ddb0b4d41a2fd6301209ffee696d479fc5cc7d96c9e1a2046fdeac6cba405553c44d9865c21d201c061bbd969297303397f68a04c80418cb2bfbf28ac280f3582796d2f6f81da3e7acb4981935ee0fc772cd3be0756cfa8cbf0699ff4f32ea47f01084302e032b8f7d251c5aa32661ee1eeed1a2140a7af90bb378893e706dd62cf65b153f184b6c0c135ef9472f1d442c9ab1549ddc730da086a5623acb514cc988f9c4952cb5ea41dbb0e42dba41f3c6226bf55db309caa351539b9c2adaa92e1747df01131aaec6271114cae676608df7cf62f234426ff5ac5486b1a5a1eec1f8ba371c00930a4557eff89ec7cf41cba708a5daf27b0f44e6328f73d3732b48eccde93802787f4b2dd933fc2435dfb00c0084b991e8033bae0b70fe214a5e1dfa9825c60869bcce011aa4b60afc91396821334e0cbaaa4cd0ae24e2b7e0e3556e563da91a3b5b6d88c842fc0c0bf99086173ade6e1bfe91b601d2681b938172e9e181de06777958a2f1f9278cf80f814ba8ac17c4226fa2cb00c01c7cd2e965b3e5d11a2007531bd8659c7ade36ed1d9b60441d79a7f0e32be0bc7268ce385f511bb01026e5e225da812e060be004781f9d87c2857261069824135f6e3f44535c3b90c00c1f8334d84219ebf77281a80909136da44db81f0380d5862b1b0f2d3e9bce9b19567c9d449dc7a182565f1d7f601f2f761fb4e2979eabeaf881541216e948bb12102ba95b9542595ef9c3a30dc622bfde7a96301cafed7aa4109d26fdb581c30efbc2966e37b5c3711d05d54236cd1dac694e6019435c6d57c81f0db8db62412cbcd77d9c5ae6d77246811f748031d50e64c76ea4e444bfc2a4982f5fab8f030b0139f4ed8ec2f01ec5fa1e2e3f9f003d0c05c5a0af3e1b033639f354d962d8508104225f74873510f1ed3f55ef63a9d04d8c6931ebcbf8d285f7f5b4d797ed67";
        let instances = vector[
        x"0600000000000000000000000000000000000000000000000000000000000000",
        x"0600000000000000000000000000000000000000000000000000000000000000",
        x"0600000000000000000000000000000000000000000000000000000000000000"
        ];
        let instances = vector::map_ref<vector<u8>, Element<Fr>>(&instances, |instance| {
            option::destroy_some( bn254_utils::deserialize_fr(instance))
        });
        let result = halo2_verifier::verify(&params, &protocol, vector::singleton(vector::singleton(instances)), proof);
        assert!(result, 100);
    }
}
